services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE=${INSTANCE:-dev}
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      # Azure SSO Configuration (Frontend)
      - NEXT_PUBLIC_AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - NEXT_PUBLIC_AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      - NEXT_PUBLIC_AZURE_REDIRECT_URI=${AZURE_REDIRECT_URI:-http://localhost:3000/authorize}
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE=${INSTANCE:-dev}
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-uru_chatbot}
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]
      - ENVIRONMENT=development
      # Azure SSO Configuration (Backend)
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      - AZURE_REDIRECT_URI=${AZURE_REDIRECT_URI:-http://localhost:3000/authorize}
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-uru_chatbot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  postgres_data:
  app_data:

networks:
  app-network:
    driver: bridge
