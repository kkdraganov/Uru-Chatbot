services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - INSTANCE=${INSTANCE:-dev}
        - NEXT_PUBLIC_API_URL="https://api.[INSTANCE].uruenterprises.com/api"
    ports:
      - "172.17.0.1:3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - INSTANCE=${INSTANCE:-dev}
      - NEXT_PUBLIC_API_URL="https://api.[INSTANCE].uruenterprises.com/api"
    depends_on:
      - backend
    restart: always
    env_file:
      - ./.env

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "172.17.0.1:8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY:-development_secret_key}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-uru_chatbot}
      - INSTANCE=${INSTANCE:-dev}
      - DATABASE_URL="postgresql+asyncpg://[POSTGRES_USER]:[POSTGRES_PASSWORD]@db:5432/[POSTGRES_DB]"
      - CORS_ORIGINS=["https://[INSTANCE].uruenterprises.com","https://api.[INSTANCE].uruenterprises.com"]
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - db
    restart: always
    env_file:
      - ./.env

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-uru_chatbot}
    restart: always
    env_file:
      - ./.env

volumes:
  postgres_data:
