name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Python Backend Quality Checks
  python-quality:
    name: Python Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy bandit pytest pytest-cov
        
    - name: Run Ruff linting
      run: ruff check . --output-format=github
      
    - name: Run Ruff formatting check
      run: ruff format --check .
      
    - name: Run MyPy type checking
      run: mypy . --config-file=../pyproject.toml
      
    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: backend/bandit-report.json

  # Frontend Quality Checks
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Build application
      run: npm run build

  # Docker Quality Checks
  docker-quality:
    name: Docker Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        failure-threshold: error
        
    - name: Lint backend development Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile.dev
        failure-threshold: error
        
    - name: Lint frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile
        failure-threshold: error
        
    - name: Lint frontend development Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile.dev
        failure-threshold: error

  # Security Scans
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit (frontend)
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high --production || true
        
    - name: Check for Python security vulnerabilities
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Upload safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: backend/safety-report.json

  # Custom Validations
  custom-validations:
    name: Custom Validations
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python for custom scripts
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/validate_env_files.sh
        chmod +x scripts/validate_mcp_schemas.py
        
    - name: Validate MCP schemas
      run: python scripts/validate_mcp_schemas.py
      
    - name: Validate environment files
      run: scripts/validate_env_files.sh

  # Database Migration Check
  database-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      working-directory: ./backend/database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        alembic upgrade head
        
    - name: Check migration consistency
      working-directory: ./backend/database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        alembic check

  # Test Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Python tests
      working-directory: ./tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key
      run: |
        python -m pytest -v --cov=../backend/app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        flags: backend
        name: backend-coverage

  # Summary Job
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [python-quality, frontend-quality, docker-quality, security-scan, custom-validations, database-check, test-suite]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.python-quality.result }}" != "success" ]]; then
          echo "Python quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-quality.result }}" != "success" ]]; then
          echo "Frontend quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.docker-quality.result }}" != "success" ]]; then
          echo "Docker quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.custom-validations.result }}" != "success" ]]; then
          echo "Custom validations failed"
          exit 1
        fi
        if [[ "${{ needs.database-check.result }}" != "success" ]]; then
          echo "Database check failed"
          exit 1
        fi
        if [[ "${{ needs.test-suite.result }}" != "success" ]]; then
          echo "Test suite failed"
          exit 1
        fi
        echo "All quality checks passed! âœ…"
